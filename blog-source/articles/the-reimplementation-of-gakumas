---
publicId: the-reimplementation-of-gakumas
lastUpdatedAt: 2024-12-09 09:00:00+0900
---

# 学マスのカードゲーム部分の実装を再現した話

学マスというゲームの再現実装をしたので、その作業中に感じた開発ノウハウを話す内容です。

## 学マスとは？

[学園アイドルマスター](https://gakuen.idolmaster-official.jp/)というバンナムが運営している、いわゆるカジュアルスマホゲーム・ソーシャルゲームです。

2024/05/16にリリースしており、初日にプレイして出来の良さにびっくりしてバンナムの株を買ったほどです。別段上がってないです。

おおよそのゲーム性は、デッキ構築型のカードゲームと、パワプロのサクセス部分もしくはウマ娘の育成ゲーム部分の組み合わせです。

## なぜ再現実装をしたの？

一言で言うと、趣味だから・楽しいからです。

もう少し解説すると、自身のキャリアや時代の変化により、仕事で答えのあるロジックをプログラミングをする量が減少しており、時折無性にロジックとテストコードを交互に書くような作業がしたくなることがあります。その題材として、既存のゲームの再現を選んでいます。

他には、直近の完成品だと[ローゼンケーニッヒというボードゲームの再現](https://github.com/kjirou/rosenkoenig-core)を書きました。また、途中で学マスへ切り替えてしまいましたが、[ポケカの再現をしようとして初手のデータモデリングで止まって](https://github.com/kjirou/pokemon-tcg-core/pull/3)ます。exスタートデッキの範疇でも中々複雑で、TCGの闇を知った気がします。

また、単に感銘したモノに対しての推し心の発露という側面もあります。なんかしたくなる。

## 再現実装のこと

関連リポジトリは以下です。

- [kjirou/gakumas-core](https://github.com/kjirou/gakumas-core)
- [kjirou/gakumas-lesson-simulator](https://github.com/kjirou/gakumas-lesson-simulator)

gakumas-coreは、TypeScript製のPure JavaScriptのコードです。ゲームロジックを表現したデータ構造と関数の集合です。gakumas-lesson-simulatorは、UIへ反映する検証をゲームのシミュレーターという形で表現するための[Gatsby](https://www.gatsbyjs.com/)の実装で、今回の話にはあまり関係ありません。

再現したのはデッキ構築型カードバトル部分のみで、育成ゲーム部分は含みません。プレイヤーから見てゲームの研究対象になるのは主に育成ゲーム部分であり、全く世間の需要を満たしていない実装でもあります。

2024/09/22にマージした[【Feel Jewel Dream】有村麻央を追加](https://github.com/kjirou/gakumas-core/pull/253)が最後のプルリクエストで、それ以後は残念ながらゲームへの興味を失ってしまったので、追随していません。プレイヤーとしての現状はログボ勢です。アノマリーって何ですか？

## 感じた開発ノウハウ

はじめにおことわりですが、自分はゲーム作成のプロどころかアマチュアですらなく、そちらの経験はほぼありません。10年前くらいに2本程度JSである程度の大きさのゲームを作っていますが、過去の話です。どちらかというと、Webフロントエンド開発者もしくはWebプログラマとしての見解です。

### 状態の更新は間にイベントを介して表現すると良かった

例えば、ライフへ5ダメージを与える処理は、以下のように状態の変化を表現するイベントを生成して返すに留めました。

```js
const ダメージを与える処理 = (ダメージを受ける対象 /* , 色々引数がある */) => {
  /* 色々処理をしている */
  return [
    {
      type: "life",
      value: -5,
    },
  ];
};
```

加えて、別にイベントリストを集計して現在値を算出する処理を作成します。

```js
const 各種現在値を算出する = (初期値, イベントリスト) => {
  let 現在値 = 初期値;
  for (const イベント of イベントリスト) {
    switch (イベント.type) {
      case "life": {
        現在値 = {
          ...現在値,
          life: 現在値.life + イベント.life,
        };
      }
    }
  }
  return 現在値;
};
```

それに対して、以下のようなライフの現在値を更新する処理にするよりも良かった、という話です。

```js
const ダメージを与える処理 = (ダメージを受ける対象 /* , 色々引数がある */) => {
  /* 色々処理をしている */
  return {
    ...ダメージを受ける対象,
    life: ダメージを受ける対象.life - 5,
  };
};
```
